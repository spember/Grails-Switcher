#!/usr/bin/env groovy

import java.text.*
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class GrailsSwitcher {
	private static String version = "0.1.2"
	
	// hidden folder that get's placed in user home
	private static String GSWITCH_PATH = "/.gswitch"
	//url pattern for downloading Grails versions. This may change in the future, but mirrors will be saved in this array
	private static List MIRRORS = [
		"http://dist.springframework.org.s3.amazonaws.com/release/GRAILS/",
		"http://dist.springframework.org.s3.amazonaws.com/milestone/GRAILS/",
		"http://grails.org/dist/"
	]

	private String userHome = ""
	private CliBuilder cli

	def GrailsSwitcher(){
		//construct the CLI options
		userHome = System.getProperty("user.home")
		cli = new CliBuilder(usage:"gswitch [options] <version>")
		cli.h(longOpt:"help", "Display this message")
		cli.v(longOpt:"versions", "Lists currently installed Grails versions")
		cli.a(longOpt:"auto", "If in a Grails App root directory, will set the current Grails version to match")
		cli.i(longOpt:"install", args:1, argName:"version", "Installs the specified version, if it exists")
		cli.init("Initializes gswitch")

	}

	/**
		Convenience method for building the path to the symlink. This path should be set to your $GRAILS_HOME, and $GRAILS_HOME/bin should be in your path
	*/
	String symPath(){
		userHome+GSWITCH_PATH+"/grails"
	}

	/**
		Convenience method for building the path to where the downloaded Grails version will be set
	**/
	String versionsPath(){
		userHome+GSWITCH_PATH+"/versions"
	}

	String versionFolderPath( gv ){
		versionsPath() +"/grails-${gv}"
	}


	/**
		Prints help information
	**/
	def writeHelp(){
		println "GrailsSwitcher v ${version}"
		cli.usage()
		println "Executing 'gswitch <version>' will set the current environment's Grails version, if available"
		println "Usage of the auto switch may be removed in the future; executing gswitch without arguments while in the folder of a Grails Application Will now automatically attempt to match versions."
	}

	/**
		Executed on first run; builds the relevant directories
	**/
	def init( ){
		//create the base directories
		File versions = new File(userHome +GSWITCH_PATH+"/versions")
		versions.mkdirs()
	}

	def isFirstRun(){
		File gswitchHome = new File(userHome + GSWITCH_PATH)
		!gswitchHome.exists()
	}

	/**
		Checks to see if the user is currently in a Grails Application. It does this by looking for 'application.properties' and a 
		'grails-app' directory
	**/
	def isGrailsApplication(){
		File appProps = new File("application.properties")
		File gAppDir = new File("grails-app")
		boolean isGrailsApp = false
		if(gAppDir.exists() && gAppDir.isDirectory() && appProps.exists() && appProps.canRead()){
			isGrailsApp = true
		}
		isGrailsApp
	}

	/**
		Discovers the application version from the application.properties
	**/
	def getGrailsApplicationVersion(){
		Properties props = new Properties()
		def version = null
		try{
			props.load(new FileInputStream("application.properties"))
			def config = new ConfigSlurper().parse(props)
			version = config.app.grails.version
		}
		catch(IOException ioe){
			println "Could not load application.properties file"
		}
		version
	}

	/**
		Cycles through the MIRRORS, looking for the grails version
	

	**/
	def downloadVersion( targetVersion, zipPath ){
		boolean result = false
		FileOutputStream zipFile
		BufferedOutputStream out
		
		for(mirror in MIRRORS){	
			try{
				//attempt to download a new version
				println "Downloading from ${mirror}..."
				zipFile = new FileOutputStream(zipPath)
	    		out = new BufferedOutputStream(zipFile)
	    		out << new URL(mirror+"grails-" +targetVersion +".zip").openStream()
	    		out.close()
	    		result = true
	    		break
    		}
    		catch(java.io.FileNotFoundException fnfe){
	    		println "Version '${targetVersion}' not found"
    		}

		}

		if(!result){
			//clean up
			out.close()
			new File(zipPath).delete()
			println "Version '${targetVersion}' does not appear to be a valid Grails version."
		}

		result
	}


	/**
		Responsible for downloading / extracting the relevant version

	**/
	def installVersion( targetVersion ){
		println "Installing ${targetVersion}"
		
		String versionPath = versionFolderPath( targetVersion )
		String zipPath = versionPath+".zip"
		
		if(downloadVersion(targetVersion, zipPath)){

	    	//unzip
	    	if(new File(zipPath).exists()){
	    		def ant = new AntBuilder()
	    		try{
	    			ant.unzip( src: zipPath, dest: versionsPath(), overWrite:true)	
	    		}
	    		catch(java.util.zip.ZipException ze){
	    			println "There was a problem unzipping the file. Clearing out. Please try again, and if problem persists, please report it"
	    			zipPath.delete()
	    		}
	    	}
	    	
	    	//check complete
	    	if(new File(versionPath).exists()){
	    		//set executable permissions on the bin folder, just in case
	    		new File(versionPath+"/bin").eachFile{
	    			it.setExecutable(true)
	    		}
	    		println "Version '${targetVersion}' installed. Run gswitch again to set the version."
	    		new File(zipPath).delete()
	    	}
	    	else{
	    		println "Version '${targetVersion}' not installed correctly. Ensure you have selected a proper version."
	    	}
    	}

	}

	def getInstalledVersions(){
		List versions = []
		new File(versionsPath()).eachDir {
			versions.add(it.absolutePath.split("-")[-1])
		}
		versions		
	}


	def listInstalledVersions(){
		println "Installed Grails Versions:"
		getInstalledVersions().each{
			println "\t${it}"	
		}	
	}

	def replaceSymLink( String path ){
		//first, remove the old link, if exists
		
		try{
			File link = new File( symPath() )
			if(link.exists()){
				link.delete()	
			}
		}
		catch(Exception e){
			println "error!"
		}
		
		// now, create
		if(new File(path).exists()){
			['ln', '-s', path, symPath()].execute().waitFor() 
		}
		else{
			println "Error: Could not create a symlink."
		}

	}


	def setVersion( targetVersion ){
		if(targetVersion in getInstalledVersions()){
			print "Setting to version ${targetVersion}..."
			replaceSymLink( versionFolderPath( targetVersion ))
			println " done."
		}
		else{
			println "Version '${targetVersion}' does not appear to be installed"
			promptToInstallVersion targetVersion
		}

	}

	/**
		Prompts the user if they wish to install a Grails version. 

		@param String targetVersion The version to install
	**/
	def promptToInstallVersion( targetVersion ){
		def allowed = null
		def input
		String yOrN = "[y/n]: "
		print "Would you like to install version '${targetVersion}'? ${yOrN}"
		System.in.withReader {
			while(true){ 
				input = it.readLine().toLowerCase()
				if(input=="y"){
					allowed = true
					break
				}
				else if(input == "n"){
					allowed = false
					break
				}
				else{
					print yOrN
				}
			}
			
		}
		if(allowed){
			installVersion targetVersion
		} 
	}


	/**
		Attempts to match the current grails version, if in a current Grails Application

	**/
	def matchVersion(){
		if(isGrailsApplication()){
			def version = getGrailsApplicationVersion()
			if(version){
				println "Local Grails Application is using version ${version}"
				setVersion version
			}
			else{
				println "No version found"
			}
			
		}
		else{
			println "This command must be executed while in the root folder of a Grails Application"
		}
	}


	def go(args){
		//def cli = new CliBuilder(usage:"gswitch [version]"),
		def	targetVersion = "",
			options = cli.parse(args)		

		if( isFirstRun() ){
			println "Configuring folders..."
			init()
		}
		
		if(!options.arguments() && isGrailsApplication() && !options.h){
			matchVersion()
		}
		
		else if( options.init){
			init()
		}
		else if(options.a){
			matchVersion()
		}		
		else if(options.i){
			installVersion( options.i )
		}
		else if(options.versions){
			listInstalledVersions()
		}
		else if(!options.arguments() || options.h){
			writeHelp()
		}
		else{
			setVersion(options.arguments()[0])
		}

	}
}

def gswitch = new GrailsSwitcher()
gswitch.go( this.args )
